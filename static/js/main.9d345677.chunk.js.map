{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","makeSelection","event","_this$setState","setState","defineProperty","target","name","value","recalculate","changeValue","e","parseFloat","state","isNaN","undefined","cached","base","Date","now","timestamp","conversion","rates","other","fetch","concat","then","res","json","data","currencies","react_default","a","createElement","onChange","map","currency","key","disabled","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gOAsGeA,qBAjGb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAWRQ,cAAgB,SAAAC,GAAS,IAAAC,EACvBT,EAAKU,UAALD,EAAA,GAAAR,OAAAU,EAAA,EAAAV,CAAAQ,EAEKD,EAAMI,OAAOC,KAAOL,EAAMI,OAAOE,OAFtCb,OAAAU,EAAA,EAAAV,CAAAQ,EAAA,aAGgB,IAHhBA,GAKET,EAAKe,cAlBUf,EAsBnBgB,YAAc,SAAAC,GACZjB,EAAKU,SACH,CACEI,MAAOG,EAAEL,OAAOE,OAElBd,EAAKe,cA3BUf,EA+BnBe,YAAc,WACZ,IAAID,EAAQI,WAAWlB,EAAKmB,MAAML,OAC9BM,MAAMN,UAGyBO,IAAjCrB,EAAKsB,OAAOtB,EAAKmB,MAAMI,OACvBC,KAAKC,MAAQzB,EAAKsB,OAAOtB,EAAKmB,MAAMI,MAAMG,UAAY,KAEtD1B,EAAKU,SAAS,CACZiB,WAAY3B,EAAKsB,OAAOtB,EAAKmB,MAAMI,MAAMK,MAAM5B,EAAKmB,MAAMU,OAASf,IAEvEgB,MAAK,+CAAAC,OAAgD/B,EAAKmB,MAAMI,OAC7DS,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GACJnC,EAAKsB,OAAOtB,EAAKmB,MAAMI,MAAQ,CAC7BK,MAAOO,EAAKP,MACZF,UAAWF,KAAKC,OAElBzB,EAAKU,SAAS,CACZiB,WAAYQ,EAAKP,MAAM5B,EAAKmB,MAAMU,OAASf,QAhDjDd,EAAKsB,OAAS,GACdtB,EAAKoC,WAAa,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,OACtDpC,EAAKmB,MAAQ,CACXI,KAAM,MACNM,MAAO,MACPf,MAAO,EACPa,WAAY,GARG3B,wEAuDjB,OACEqC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACEC,SAAUrC,KAAKI,cACfM,KAAK,OACLC,MAAOX,KAAKgB,MAAMI,MAEjBpB,KAAKiC,WAAWK,IAAI,SAAAC,GAAQ,OAC3BL,EAAAC,EAAAC,cAAA,UAAQI,IAAKD,EAAU5B,MAAO4B,GAC3BA,MAIPL,EAAAC,EAAAC,cAAA,SAAOC,SAAUrC,KAAKa,YAAaF,MAAOX,KAAKgB,MAAML,SAEvDuB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACEC,SAAUrC,KAAKI,cACfM,KAAK,QACLC,MAAOX,KAAKgB,MAAMU,OAEjB1B,KAAKiC,WAAWK,IAAI,SAAAC,GAAQ,OAC3BL,EAAAC,EAAAC,cAAA,UAAQI,IAAKD,EAAU5B,MAAO4B,GAC3BA,MAIPL,EAAAC,EAAAC,cAAA,SACEzB,MAC4B,KAA1BX,KAAKgB,MAAMQ,YAA0C,KAArBxB,KAAKgB,MAAML,MACvC,kBACAX,KAAKgB,MAAMQ,WAEjBiB,UAAQ,aA1FFC,IAAMC,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,KAAK,SAAA4B,GACjCA,EAAaC","file":"static/js/main.9d345677.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.cached = {};\n    this.currencies = [\"CAD\", \"AUD\", \"USD\", \"JPY\", \"NZD\", \"GBP\"];\n    this.state = {\n      base: \"AUD\",\n      other: \"CAD\",\n      value: 0,\n      conversion: 0\n    };\n  }\n\n  makeSelection = event => {\n    this.setState(\n      {\n        [event.target.name]: event.target.value,\n        conversion: \"\"\n      },\n      this.recalculate\n    );\n  };\n\n  changeValue = e => {\n    this.setState(\n      {\n        value: e.target.value\n      },\n      this.recalculate\n    );\n  };\n\n  recalculate = () => {\n    let value = parseFloat(this.state.value);\n    if (isNaN(value)) return;\n\n    if (\n      this.cached[this.state.base] !== undefined &&\n      Date.now() - this.cached[this.state.base].timestamp < 1000 * 60\n    )\n      this.setState({\n        conversion: this.cached[this.state.base].rates[this.state.other] * value\n      });\n    fetch(`https://api.exchangeratesapi.io/latest?base=${this.state.base}`)\n      .then(res => res.json())\n      .then(data => {\n        this.cached[this.state.base] = {\n          rates: data.rates,\n          timestamp: Date.now()\n        };\n        this.setState({\n          conversion: data.rates[this.state.other] * value\n        });\n      });\n  };\n  render() {\n    return (\n      <div>\n        <div>\n          <select\n            onChange={this.makeSelection}\n            name=\"base\"\n            value={this.state.base}\n          >\n            {this.currencies.map(currency => (\n              <option key={currency} value={currency}>\n                {currency}\n              </option>\n            ))}\n          </select>\n          <input onChange={this.changeValue} value={this.state.value} />\n        </div>\n        <div>\n          <select\n            onChange={this.makeSelection}\n            name=\"other\"\n            value={this.state.other}\n          >\n            {this.currencies.map(currency => (\n              <option key={currency} value={currency}>\n                {currency}\n              </option>\n            ))}\n          </select>\n          <input\n            value={\n              this.state.conversion === \"\" && this.state.value !== \"\"\n                ? \"Calculating... \"\n                : this.state.conversion\n            }\n            disabled\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}